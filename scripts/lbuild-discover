#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (c) 2015, Fabian Greif
# All Rights Reserved.
#
# The file is part of the lbuild project and is released under the
# 2-clause BSD license. See the file `LICENSE.txt` for the full license
# governing this code.

import os
import sys
import argparse

rootpath = os.path.join(os.path.dirname(os.path.realpath(__file__)), "..")
sys.path.append(rootpath)

import lbuild.parser
import lbuild.logger

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Build libraries from source code repositories')
    parser.add_argument('-r', '--repository',
        dest='repositories',
        required=True,
        action='append',
        help='Folder in which modules are located')
    parser.add_argument('-c', '--configuration',
        dest='config',
        help='Project/library configuration file')
    parser.add_argument('-D', '--option',
        dest='options',
        action='append',
        type=str,
        default=[],
        help='Additional options. Options given here will be merged with options '
             'from the configuration file.')
    parser.add_argument('-d', '--discover',
        required=True,
        dest='discover',
        choices=['repository:options', 'modules', 'module:options'])
    parser.add_argument('-m', '--module',
        action="append",
        type=str,
        default=[],
        dest='modules')
    parser.add_argument('-v', '--verbose',
        action='count',
        default=0,
        dest='verbose')

    args = parser.parse_args()

    lbuild.logger.configure_logger(args.verbose)

    try:
        parser = lbuild.parser.Parser()
        for repofile in args.repositories:
            parser.parse_repository(repofile)

        if args.config is not None:
            selected_modules, config_options = parser.parse_configuration(args.config)
        else:
            selected_modules = []
            config_options = {}
        commandline_options = parser.format_commandline_options(args.options)
        repo_options = parser.merge_repository_options(config_options, commandline_options)

        if args.discover == 'repository:options':
            for option in sorted(list(repo_options.values())):
                print(option)
        elif args.discover == 'modules':
            parser.prepare_repositories(repo_options)
            modules = parser.prepare_modules(repo_options)
            for module in sorted(list(modules.values())):
                print(module)
        elif args.discover == 'module:options':
            parser.prepare_repositories(repo_options)
            modules = parser.prepare_modules(repo_options)

            if len(args.modules) == 0:
                selected_modules = modules
            else:
                selected_modules = args.modules
            build_modules = parser.resolve_dependencies(modules, selected_modules)
            module_options = parser.merge_module_options(build_modules, config_options)

            for option in sorted(list(module_options.values())):
                print(option)
        else:
            raise lbuild.exception.BlobException("Unknown discovery "
                                                 "option '{}'".format(args.discover))
    except lbuild.exception.BlobException as e:
        sys.stderr.write('%s\n' % e)
        sys.exit(1)
